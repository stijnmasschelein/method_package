---
author: Stijn Masschelein
title: Introduction to Rstudio for Accounting and Finance
format:
  html:
    toc: true
---

This setup code loads a package, `here`, that helps to navigate the folder structure in which I will create files. The `tidyverse` package is the main package, we will use to manipulate datasets. There are other ways to program in `R`. I think that to start of the `tidyverse` way of looking at data is quite intuitive and it is very well supported. The intuition and how quickly you can do meaningful things will hopefully be clear by the end of this document.

```{r}
#| label: setup
library(here) 
i_am("auxilary/introduction_to_rstudio_for_accfin.qmd")
library(tidyverse)
library(dbplyr)
```


# Get the data

We establish a connection with the WRDS databases with my account. [WRDS](https://wrds-www.wharton.upenn.edu/) is the data provider the university subscribes to and it has a lot of good tutorials on how to connect to their databases from R. Important, you will first have to ask for an account from the person in charge of the databases in the department. I will give a more extensive example later in the unit to really go over some of the details. This is meant as an illustration of what is possible with these type of files and code.

The code below establishes a connection with the WRDS servers under my username. The [WRDS website](https://wrds-www.wharton.upenn.edu/pages/support/programming-wrds/programming-r/r-from-your-computer/) has instructions on how to do set up the connection and how you can safely store your WRDS password so you do not have to type it. The settings I used here are all given by the WRDS instructions. 

```{r}
#| label: wrds_connection
library(RPostgres)
wrds <- dbConnect(Postgres(),
              host='wrds-pgdata.wharton.upenn.edu',
              port=9737,
              dbname='wrds',
              user='stimas',
              sslmode='require')
```

Next, I download the data that we need from the `wrds` connection that I established before. I use the `tbl` function from the `dbplyr` package. This basically allows me to use the `tidyverse` verbs to to interact with almost any database. I give the downloaded data a name `wrds_data` so that I can use it further down the line. The only thing to remember with the `tbl` function is that you need to run the `collect` function at the end of the query so that the data is downloaded. Obviously, you need to know where the data is on the servers and how the variables are named. Sometimes, you can ask colleagues but other times, you will have to read the documentation on the WRDS website.  

```{r}
#| label: query_execcomp
wrds_data <- tbl(wrds, in_schema("execcomp", "anncomp")) %>%
  filter(year > 2010 & ceoann == "CEO") %>%
  select(year, gvkey, cusip, exec_fullname, coname, ceoann,
    execid, bonus, salary, stock_awards_fv, stock_unvest_val,
    eip_unearn_num, eip_unearn_val, option_awards,
    option_awards_blk_value, option_awards_num, tdc1, tdc2,
    shrown_tot_pct, becameceo, joined_co, reason) %>%
  collect()
```

Here, I clean up the data and have a quick look after which I save it in my `data` folder to share it with you.

```{r}
#| label: wrds_execcomp
#| eval: true
library(tidyverse)
compensation <- as_tibble(wrds_data) %>%
  rename_all(tolower)
glimpse(compensation)
saveRDS(compensation, here("data", "us-compensation-new.RDS"))
```
Now, we do the same for the market value of the company. Again, we can do this completely in `R`. I don't want to download all market values. Only for the firms that are already in our compensation data. What I do is to extract all the identifiers of the firms in our original data.


```{r}
#| label: gvkeys
gvkeys <- unique(compensation$gvkey)
length(gvkeys)
```

The remainder of the code follows a fairly similar pattern as before. I extract three variables from the WRDS databases `fyear` and `gvkey` so that we can match it with the compensation data and the `mkvalt` at the end of the fiscal year. 

```{r}
#| label: wrds_fundamental
value <-  tbl(wrds, in_schema("comp", "funda")) %>%
  filter(gvkey %in% gvkeys, fyear > 2010) %>%
  select(fyear, gvkey, mkvalt) %>%
  collect()
glimpse(value)
value <- distinct(value)
glimpse(value)

saveRDS(value, here("data", "us-value-new.RDS"))
```

# Explore the data

## With the tidyverse

```{r}
us_comp <- readRDS(here("data", "us-compensation-new.RDS"))
glimpse(us_comp)
```

```{r}
filter(us_comp, gvkey == "001004")
```

```{r}
filter(us_comp, bonus == 0, year == 2012)
```

## A Gamestop to introduce the pipe

1. Look for any company where "gamestop" is in the name of the company.
2. Look for the `gvkey` of Gamestop. Then use `filter` with exactly that key.

```{r gamestop}
filter(us_comp, str_detect(tolower(coname),
                           "gamestop"))
filter(us_comp, gvkey == "145049")
```

## Moving on

```{r}
select(us_comp, year, coname, bonus, salary, total = tdc1)
```

We first build up the dataset with `select` and `mutate` and the pipe `%>%`. When we are satisfied with the result, we can save the dataset as an R object with the name `us_comp_small`.

```{r}
us_comp_small <-
  select(us_comp, year, coname, bonus,
       salary, total = tdc1) %>%
    mutate(salary_percentage = salary/total)
print(us_comp_small)
```


## Quick descriptive statistics

```{r}
group_by(us_comp, gvkey) %>%
    summarise(N = n(), N_CEO = n_distinct(execid),
              average = mean(salary),
              sd = sd(salary),
              med = median(salary),
              min = min(salary),
              max = max(salary)) %>%
    ungroup() %>%
  filter(med > 1000)
```

```{r}
summarise(us_comp, N = n(), N_CEO = n_distinct(execid),
              average = mean(salary),
              sd = sd(salary),
              med = median(salary),
              min = min(salary),
              max = max(salary),
          .by = gvkey) %>%
  filter(med > 1000)
```
